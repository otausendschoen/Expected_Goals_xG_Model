geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) by Player in 2015/16 Premier League",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
# Filter for EPL 2015/16 and compute predicted xG using your model_descriptive
la_liga_df_team <- xg_df_encoded %>%
filter(competition_name == "Spain - La Liga", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data to sum actual goals and expected goals for the season per team.
# Using as.numeric(is_goal) converts TRUE to 1 and FALSE to 0 on the fly.
team_summary <- la_liga_df_team %>%
group_by(team.name) %>%
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE)
) %>%
arrange(desc(actual_goals))
# View the summary table
print(team_summary)
# Plot Actual vs Expected Goals for each team
ggplot(team_summary, aes(x = expected_goals, y = actual_goals, label = team.name)) +
geom_point(color = "lightseagreen", size = 3) +
geom_text_repel(
size = 3,
max.overlaps = 15,
box.padding = 0.35,
point.padding = 0.5
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) in 2015/16 EPL",
x = "Expected Goals (xG)",
y = "Actual Goals"
) +
theme_minimal(base_size = 12)
# Filter for Premier League 2015/16 shots and generate predictions
la_liga_df_player <- xg_df_encoded %>%
filter(competition_name == "England - Premier League", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- la_liga_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) by Player in 2015/16 Premier League",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
# Filter for La Liga 2015/16 shots and generate predictions
la_liga_df_player <- xg_df_encoded %>%
filter(competition_name == "Spain - La Liga", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- la_liga_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) by Player in 2015/16 Premier League",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
# Filter for La Liga 2015/16 and compute predicted xG using your model_descriptive
la_liga_df_team <- xg_df_encoded %>%
filter(competition_name == "Spain - La Liga", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data to sum actual goals and expected goals for the season per team.
# Using as.numeric(is_goal) converts TRUE to 1 and FALSE to 0 on the fly.
team_summary <- la_liga_df_team %>%
group_by(team.name) %>%
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE)
) %>%
arrange(desc(actual_goals))
# View the summary table
print(team_summary)
# Plot Actual vs Expected Goals for each team
ggplot(team_summary, aes(x = expected_goals, y = actual_goals, label = team.name)) +
geom_point(color = "lightseagreen", size = 3) +
geom_text_repel(
size = 3,
max.overlaps = 15,
box.padding = 0.35,
point.padding = 0.5
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) in 2015/16 EPL",
x = "Expected Goals (xG)",
y = "Actual Goals"
) +
theme_minimal(base_size = 12)
# Filter for La Liga 2015/16 shots and generate predictions
la_liga_df_player <- xg_df_encoded %>%
filter(competition_name == "Spain - La Liga", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- la_liga_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) by Player in 2015/16 Premier League",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
# Filter for La Liga 2015/16 and compute predicted xG using your model_descriptive
world_cup_df_team <- xg_df_encoded %>%
filter(competition_name == "International - FIFA World Cup", season_name == "2022") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data to sum actual goals and expected goals for the season per team.
# Using as.numeric(is_goal) converts TRUE to 1 and FALSE to 0 on the fly.
team_summary <- world_cup_df_team %>%
group_by(team.name) %>%
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE)
) %>%
arrange(desc(actual_goals))
# View the summary table
print(team_summary)
# Plot Actual vs Expected Goals for each team
ggplot(team_summary, aes(x = expected_goals, y = actual_goals, label = team.name)) +
geom_point(color = "lightseagreen", size = 3) +
geom_text_repel(
size = 3,
max.overlaps = 15,
box.padding = 0.35,
point.padding = 0.5
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) in 2015/16 EPL",
x = "Expected Goals (xG)",
y = "Actual Goals"
) +
theme_minimal(base_size = 12)
# Filter for La Liga 2015/16 shots and generate predictions
world_cup_df_player <- xg_df_encoded %>%
filter(competition_name == "International - FIFA World Cup", season_name == "2022") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- world_cup_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) by Player in 2015/16 Premier League",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
# Filter for La Liga 2015/16 shots and generate predictions
world_cup_df_player <- xg_df_encoded %>%
filter(competition_name == "International - FIFA World Cup", season_name == "2022") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- world_cup_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) in 2022 FIFA World Cup",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
# Filter for La Liga 2015/16 shots and generate predictions
la_liga_df_player <- xg_df_encoded %>%
filter(competition_name == "Spain - La Liga", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- la_liga_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) by Player in 2015/16 Spanish La Liga",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
names(pred_data)
# Create a prediction data frame for angle_to_goal.
# Here, we assume the model_descriptive uses these predictors:
# shot_distance, angle_to_goal, under_pressure, is_shot_foot, shot.is_assisted.
# We'll hold shot_distance at its median and the others at typical values.
pred_data_angle <- data.frame(
angle_to_goal = seq(min(train_data$angle_to_goal, na.rm = TRUE),
max(train_data$angle_to_goal, na.rm = TRUE),
length.out = 100),
shot_distance = median(train_data$shot_distance, na.rm = TRUE),
under_pressure = FALSE,       # typical value
is_shot_foot = TRUE,          # typical value
shot.is_assisted = FALSE      # typical value
)
# Use the descriptive model to predict probabilities based on these values.
pred_data_angle$pred_prob <- predict(model_descriptive, newdata = pred_data_angle, type = "response")
# Plot the relationship between angle_to_goal and predicted goal probability.
ggplot(pred_data_angle, aes(x = angle_to_goal, y = pred_prob)) +
geom_line(color = "blue", size = 1) +
labs(title = "Predicted Goal Probability vs. Angle to Goal",
x = "Angle to Goal (Degrees)",
y = "Predicted Probability of Scoring") +
theme_minimal(base_size = 12)
# Filter for EPL 2015/16 and compute predicted xG using your model_descriptive
premier_df_team <- xg_df_encoded %>%
filter(competition_name == "England - Premier League", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data to sum actual goals and expected goals for the season per team.
# Using as.numeric(is_goal) converts TRUE to 1 and FALSE to 0 on the fly.
team_summary <- premier_df_team %>%
group_by(team.name) %>%
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE)
) %>%
arrange(desc(actual_goals))
# View the summary table
print(team_summary)
# Plot Actual vs Expected Goals for each team
ggplot(team_summary, aes(x = expected_goals, y = actual_goals, label = team.name)) +
geom_point(color = "lightseagreen", size = 3) +
geom_text_repel(
size = 3,
max.overlaps = 15,
box.padding = 0.35,
point.padding = 0.5
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) in 2015/16 EPL",
x = "Expected Goals (xG)",
y = "Actual Goals"
) +
theme_minimal(base_size = 12)
# Filter for Premier League 2015/16 shots and generate predictions
premier_df_player <- xg_df_encoded %>%
filter(competition_name == "England - Premier League", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- premier_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) by Player in 2015/16 Premier League",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
# Filter for La Liga 2015/16 and compute predicted xG using your model_descriptive
la_liga_df_team <- xg_df_encoded %>%
filter(competition_name == "Spain - La Liga", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data to sum actual goals and expected goals for the season per team.
# Using as.numeric(is_goal) converts TRUE to 1 and FALSE to 0 on the fly.
team_summary <- la_liga_df_team %>%
group_by(team.name) %>%
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE)
) %>%
arrange(desc(actual_goals))
# View the summary table
print(team_summary)
# Plot Actual vs Expected Goals for each team
ggplot(team_summary, aes(x = expected_goals, y = actual_goals, label = team.name)) +
geom_point(color = "lightseagreen", size = 3) +
geom_text_repel(
size = 3,
max.overlaps = 15,
box.padding = 0.35,
point.padding = 0.5
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) in 2015/16 Spanish La Liga",
x = "Expected Goals (xG)",
y = "Actual Goals"
) +
theme_minimal(base_size = 12)
# Filter for La Liga 2015/16 shots and generate predictions
la_liga_df_player <- xg_df_encoded %>%
filter(competition_name == "Spain - La Liga", season_name == "2015/2016") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- la_liga_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) by Player in 2015/16 Spanish La Liga",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
# Filter for La Liga 2015/16 and compute predicted xG using your model_descriptive
world_cup_df_team <- xg_df_encoded %>%
filter(competition_name == "International - FIFA World Cup", season_name == "2022") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data to sum actual goals and expected goals for the season per team.
# Using as.numeric(is_goal) converts TRUE to 1 and FALSE to 0 on the fly.
team_summary <- world_cup_df_team %>%
group_by(team.name) %>%
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE)
) %>%
arrange(desc(actual_goals))
# View the summary table
print(team_summary)
# Plot Actual vs Expected Goals for each team
ggplot(team_summary, aes(x = expected_goals, y = actual_goals, label = team.name)) +
geom_point(color = "lightseagreen", size = 3) +
geom_text_repel(
size = 3,
max.overlaps = 15,
box.padding = 0.35,
point.padding = 0.5
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) in 2022 FIFA World Cup",
x = "Expected Goals (xG)",
y = "Actual Goals"
) +
theme_minimal(base_size = 12)
# Filter for La Liga 2015/16 shots and generate predictions
world_cup_df_player <- xg_df_encoded %>%
filter(competition_name == "International - FIFA World Cup", season_name == "2022") %>%
mutate(predicted_xg = predict(model_descriptive, newdata = ., type = "response"))
# Aggregate the data at the player level
player_summary <- world_cup_df_player %>%
group_by(player.name) %>%  # Grouping by player name and ID
summarise(
actual_goals = sum(as.numeric(is_goal), na.rm = TRUE),
expected_goals = sum(predicted_xg, na.rm = TRUE),
shots = n()
) %>%
arrange(desc(actual_goals))
# View the summary table
print(player_summary)
ggplot(player_summary, aes(x = expected_goals, y = actual_goals, label = player.name)) +
# Use a softer green color, e.g., "forestgreen" or "palegreen4"
geom_point(color = "lightseagreen", size = 3) +
# Use geom_text_repel to minimize overlapping labels
geom_text_repel(
size = 3,
max.overlaps = 15,   # controls how many labels can overlap before some are omitted
box.padding = 0.35,  # space around the text box
point.padding = 0.5  # space around the point
) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey50") +
labs(
title = "Actual Goals vs Expected Goals (xG) in 2022 FIFA World Cup",
x = "Total Expected Goals (xG)",
y = "Total Actual Goals"
) +
theme_minimal(base_size = 12)  # Increase base font size if desired
