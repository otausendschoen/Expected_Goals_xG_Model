AngleToKeeper,
AngleDeviation
)
xg_df <- shots %>%
dplyr::select(shot.outcome.name,
play_pattern.name,
under_pressure,
location_x,
location_y,
shot_distance,
shot.technique.name,
shot.body_part.name,
shot.type.name,
shot.aerial_won,
shot.follows_dribble,
shot.first_time,
shot.open_goal,
location.x.GK,
location.y.GK,
AngleToGoal,
AngleToKeeper,
AngleDeviation
)
xg_df <- shots %>%
dplyr::select(shot.outcome.name,
play_pattern.name,
under_pressure,
location.x,
location.y,
shot_distance,
shot.technique.name,
shot.body_part.name,
shot.type.name,
shot.aerial_won,
shot.follows_dribble,
shot.first_time,
shot.open_goal,
location.x.GK,
location.y.GK,
AngleToGoal,
AngleToKeeper,
AngleDeviation
)
View(xg_df)
xg_df <- shots %>%
dplyr::select(shot.outcome.name,
play_pattern.name,
under_pressure,
location.x,
location.y,
shot_distance,
shot.technique.name,
shot.body_part.name,
shot.type.name,
shot.aerial_won,
shot.follows_dribble,
shot.first_time,
shot.open_goal,
location.x.GK,
location.y.GK,
AngleToGoal,
AngleToKeeper,
AngleDeviation
) %>%
mutate(is_goal = shot.outcome.name == "Goal") %>%  # creates TRUE/FALSE
select(is_goal, everything())  # moves is_goal to the first column
xg_df <- shots %>%
dplyr::select(shot.outcome.name,
play_pattern.name,
under_pressure,
location.x,
location.y,
shot_distance,
shot.technique.name,
shot.body_part.name,
shot.type.name,
shot.aerial_won,
shot.follows_dribble,
shot.first_time,
shot.open_goal,
location.x.GK,
location.y.GK,
AngleToGoal,
AngleToKeeper,
AngleDeviation
) %>%
mutate(is_goal = shot.outcome.name == "Goal") %>%  # creates TRUE/FALSE
dplyr::select(is_goal, everything())  # moves is_goal to the first column
xg_df <- shots %>%
dplyr::select(shot.outcome.name,
play_pattern.name,
under_pressure,
location.x,
location.y,
shot_distance,
shot.technique.name,
shot.body_part.name,
shot.type.name,
shot.aerial_won,
shot.follows_dribble,
shot.first_time,
shot.open_goal,
location.x.GK,
location.y.GK,
AngleToGoal,
AngleToKeeper,
AngleDeviation
) %>%
mutate(is_goal = shot.outcome.name == "Goal") %>%  # creates TRUE/FALSE
dplyr::select(is_goal, everything(), -shot.outcome.name)  # moves is_goal to the first column
unique(xg_df$play_pattern.name)
glimpse(xg_df)
xg_df <- xg_df %>%
mutate(
play_pattern = factor(play_pattern.name),
shot_technique = factor(shot.technique.name),
shot_body_part = factor(shot.body_part.name),
shot_type = factor(shot.type.name)
)
# Create dummy variables
dummies <- model.matrix(~ play_pattern + shot_technique + shot_body_part + shot_type - 1, data = xg_df)
# Combine with the rest of your data
xg_df_encoded <- bind_cols(
xg_df %>%
select(-play_pattern.name, -shot.technique.name, -shot.body_part.name, -shot.type.name,
-play_pattern, -shot_technique, -shot_body_part, -shot_type),
as.data.frame(dummies)
)
xg_df <- xg_df %>%
mutate(
play_pattern = factor(play_pattern.name),
shot_technique = factor(shot.technique.name),
shot_body_part = factor(shot.body_part.name),
shot_type = factor(shot.type.name)
)
# Create dummy variables
dummies <- model.matrix(~ play_pattern + shot_technique + shot_body_part + shot_type - 1, data = xg_df)
# Combine with the rest of your data
xg_df_encoded <- bind_cols(
xg_df %>%
dplyr::select(-play_pattern.name, -shot.technique.name, -shot.body_part.name, -shot.type.name,
-play_pattern, -shot_technique, -shot_body_part, -shot_type),
as.data.frame(dummies)
)
View(xg_df_encoded)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(sf)
library(spData)
library(tidyverse)
library(dplyr)
library(gdistance)
library(terra)
library(exactextractr)
library(lubridate)
#devtools::install_github("statsbomb/StatsBombR")
library(tidyverse)
library(StatsBombR)
# Chunk 3
# #Pulling StatsBomb Free Data Into R
# library(tidyverse)
# library(StatsBombR)
# Comps <- FreeCompetitions()
# comps_shots <- Comps %>%
#   filter(
#     competition_gender == 'male',
#     !competition_name %in% c('FIFA U20 World Cup', 'Indian Super league', 'Major League Soccer', 'North American League')
#   )
#
# Matches <- FreeMatches(Comps)
#
# Matches_Shots <- Matches
#
# Matches_Passes <- Matches %>%
#   filter(year(match_date) >= 2000)
#
# StatsBombData_Shots <- free_allevents(MatchesDF = Matches_Shots, Parallel = T)
# StatsBombData_Passes <- free_allevents(MatchesDF = Matches_Passes, Parallel = T)
#
# StatsBombData_Shots = allclean(StatsBombData_Shots)
# StatsBombData_Passes = allclean(StatsBombData_Passes)
#
# shots <- StatsBombData_Shots %>%
#   filter(type.name == "Shot", !is.na(location)) %>%
#   unnest_wider(location, names_sep = "_") %>%
#   rename(x = location_1, y = location_2)
#
# passes <- StatsBombData_Passes %>%
#   filter(type.name == "Pass", !is.na(location)) %>%
#   unnest_wider(location, names_sep = "_") %>%
#   rename(x = location_1, y = location_2)
#
# shots <- shots %>%
#   left_join(
#     Matches %>%
#       select(match_id, match_date),
#     by = "match_id"
#   ) %>%
#   left_join(
#     Comps %>%
#       select(competition_id, season_id, competition_name, season_name),
#     by = c("competition_id", "season_id")
#   ) %>%
#   mutate(match_date = as.Date(match_date))
#
# shots_clean <- shots %>%
#   select(
#     -carry.end_location,
#     -goalkeeper.end_location,
#     -tactics.lineup,
#     -related_events,
#     -shot.freeze_frame,
#     -pass.end_location
#   ) %>%
#   unnest_wider(shot.end_location, names_sep = "_") %>%
#   rename(
#     shot.end_x = shot.end_location_1,
#     shot.end_y = shot.end_location_2
#   )
#
# passes <- passes %>%
#   left_join(
#     Matches %>%
#       select(match_id, match_date),
#     by = "match_id"
#   ) %>%
#   left_join(
#     Comps %>%
#       select(competition_id, season_id, competition_name, season_name),
#     by = c("competition_id", "season_id")
#   ) %>%
#   mutate(match_date = as.Date(match_date))
#
# passes_clean <- passes %>%
#   select(
#     -carry.end_location,
#     -goalkeeper.end_location,
#     -tactics.lineup,
#     -related_events,
#     -shot.end_location,
#     -shot.freeze_frame
#   ) %>%
#   unnest_wider(pass.end_location, names_sep = "_") %>%
#   rename(
#     pass.end_x = pass.end_location_1,
#     pass.end_y = pass.end_location_2
#   )
#
# write_csv(shots_clean, "shots.csv")
# write_csv(passes_clean, "passes.csv")
# Chunk 4
shots<-read.csv("shots.csv")
passes <- read_csv(unz("passes.csv.zip", "passes.csv"))
# Chunk 5
head(shots[, -c(1,2,3)])
# Chunk 6
shots <- shots %>%
dplyr::select(
id,
match_id,
competition_name,
season_name,
timestamp,
minute,
second,
period,
team.name,
possession_team.name,
player.id,
player.name,
#position.id,
position.name,
#play_pattern.id,
play_pattern.name,
under_pressure,
location.x,
location.y,
shot.end_x,
shot.end_y,
shot.end_location.z,
shot.end_location_3,
shot_impact_height,
shot.statsbomb_xg,
#shot.outcome.id,
shot.outcome.name,
#shot.technique.id,
shot.technique.name,
#shot.body_part.id,
shot.body_part.name,
#shot.type.id,
shot.type.name,
shot.aerial_won,
shot.redirect,
shot.follows_dribble,
shot.first_time,
shot.open_goal,
shot.deflected,
shot.redirect,
player.id.GK,
player.name.GK,
shot.saved_off_target,
shot.saved_to_post,
location.x.GK,
location.y.GK,
AngleToGoal,
AngleToKeeper,
AngleDeviation
)
passes<- passes%>%
dplyr::select(
id,
match_id,
competition_name,
season_name,
timestamp,
minute,
second,
period,
possession_team.name,
team.name,
player.id,
player.name,
position.name,
play_pattern.name,
under_pressure,
location.x,
location.y,
pass.length,
pass.angle,
pass.end_x,
pass.end_y,
pass.aerial_won,
pass.switch,
pass.cross,
pass.assisted_shot_id,
pass.shot_assist,
pass.inswinging,
pass.deflected,
pass.outswinging,
pass.through_ball,
pass.cut_back,
pass.goal_assist,
pass.recipient.id,
pass.recipient.name,
pass.height.name,
pass.body_part.name,
pass.type.name,
pass.outcome.name,
pass.technique.name,
ball_receipt.outcome.name,
pass.no_touch
)
# Chunk 7
calculate_shot_distance <- function(x, y) {
sqrt((120 - x)^2 + (40 - y)^2) * (105 / 120)}
shots <- shots %>%
mutate(shot_distance = calculate_shot_distance(location.x, location.y))
# Chunk 8
calculate_pass_distance <- function(x1, y1, x2, y2) {
sqrt((x2 - x1)^2 + (y2 - y1)^2) * (105 / 120)
}
passes <- passes %>%
mutate(pass_distance = calculate_pass_distance(location.x, location.y, pass.end_x, pass.end_y))
# Chunk 9
shots %>%
group_by(shot.outcome.name) %>%
summarise(avg_distance = mean(shot_distance, na.rm = TRUE),
count = n()) %>%
arrange(avg_distance)
# Chunk 10
passes %>%
mutate(pass.outcome.name = replace_na(pass.outcome.name, "Complete")) %>%
group_by(pass.outcome.name) %>%
summarise(
avg_distance = mean(pass_distance, na.rm = TRUE),
count = n()
) %>%
arrange(avg_distance)
# Chunk 11
hist(shots$shot_distance, breaks = 30, main = "Shot Distance Distribution", xlab = "Distance to Goal (meters)")
# Chunk 12
shots %>%
count(player.name, sort = TRUE) %>%
slice_max(n, n = 10) %>%
ggplot(aes(x = reorder(player.name, n), y = n)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Players by Total Shot Volume", x = "Player", y = "Shots")
# Chunk 13
hist(passes$pass_distance, breaks = 50,
main = "Distribution of Pass Distances",
xlab = "Pass Distance (meters)",
col = "lightblue", border = "white")
# Chunk 14
avg_shot_distance_by_year <- shots %>%
group_by(season_name) %>%
summarise(
avg_shot_distance = mean(shot_distance, na.rm = TRUE),
shot_count = n()
) %>%
filter(!is.na(season_name))
ggplot(avg_shot_distance_by_year, aes(x = season_name, y = avg_shot_distance, group = 1)) +
geom_line(size = 1.2, color = "darkred") +
geom_point(size = 2, color = "black") +
geom_smooth(method = "loess", se = FALSE, color = "steelblue", linetype = "dashed") +
labs(
title = "Average Shot Distance Over Time",
x = "Season",
y = "Average Distance to Goal (in pitch units)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Chunk 15
avg_pass_distance_by_year <- passes %>%
group_by(season_name) %>%
summarise(
avg_pass_distance = mean(pass_distance, na.rm = TRUE),
pass_count = n()
) %>%
filter(!is.na(season_name))
ggplot(avg_pass_distance_by_year, aes(x = season_name, y = avg_pass_distance, group = 1)) +
geom_line(size = 1.2, color = "darkgreen") +
geom_point(size = 2, color = "black") +
geom_smooth(method = "loess", se = FALSE, color = "steelblue", linetype = "dashed") +
labs(
title = "Average Pass Distance Over Time",
x = "Season",
y = "Average Pass Distance (m)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Chunk 16
ggplot(shots, aes(x = shot_distance)) +
geom_density(fill = "lightblue") +
facet_wrap(~season_name) +  # no `scales = "free_y"`
labs(
title = "Distribution of Shot Distances per Season",
x = "Shot Distance (m)",
y = "Density"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 6),
strip.text = element_text(size = 8)
)
# Chunk 17
ggplot(passes, aes(x = pass_distance)) +
geom_density(fill = "lightblue") +
facet_wrap(~season_name) +
labs(
title = "Distribution of Pass Distances per Season",
x = "Pass Distance (m)",
y = "Density"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 6),
strip.text = element_text(size = 8)
)
# Chunk 18
#insert heatmap code here
# Chunk 19
xg_df <- shots %>%
dplyr::select(shot.outcome.name,
play_pattern.name,
under_pressure,
location.x,
location.y,
shot_distance,
shot.technique.name,
shot.body_part.name,
shot.type.name,
shot.aerial_won,
shot.follows_dribble,
shot.first_time,
shot.open_goal,
location.x.GK,
location.y.GK,
AngleToGoal,
AngleToKeeper,
AngleDeviation
) %>%
mutate(is_goal = shot.outcome.name == "Goal") %>%  # creates TRUE/FALSE
dplyr::select(is_goal, everything(), -shot.outcome.name)  # moves is_goal to the first column
unique(xg_df$play_pattern.name)
unique(xg_df$shot.technique.name)
unique(xg_df$shot.body_part.name)
unique(xg_df$shot.type.name)
insert_one_hot <- function(df, col_name) {
# Create dummy variables (as a data frame)
dummies <- as.data.frame(model.matrix(~ . - 1, data = df[col_name]))
# Clean up column names
colnames(dummies) <- gsub(paste0("^", col_name), col_name, colnames(dummies))
colnames(dummies) <- gsub(" ", ".", colnames(dummies))  # Replace spaces if needed
# Get the original column position
pos <- which(names(df) == col_name)
# Build new df: before, dummies, after
df_new <- bind_cols(
df[1:(pos - 1)],
dummies,
df[(pos + 1):ncol(df)]
)
return(df_new)
}
xg_df_encoded <- xg_df  # make a copy to preserve original
cols_to_encode <- c("play_pattern.name", "shot.technique.name", "shot.body_part.name", "shot.type.name")
for (col in cols_to_encode) {
xg_df_encoded <- insert_one_hot(xg_df_encoded, col)
}
View(xg_df_encoded)
names(xg_df_encoded)
